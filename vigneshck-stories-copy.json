{
   "posts":[
      {
         "reward":{
            "type":"xlm"
         },
         "sourcedFromGithub":false,
         "isAnonymous":false,
         "views":7,
         "slugOverridden":false,
         "coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1637597868460/w4jWGBwnV.png",
         "autoGeneratedCover":"",
         "brief":"Context: I recently switched to Atom Editor as I faced some problems with VS Code and did not have time to figure it out, then.\nInstall the Atom Editor from their official website.\nOpen it and work on your code that's already cloned from a remote rep...",
         "content":"<p><em>Context: I recently switched to Atom Editor as I faced some problems with VS Code and did not have time to figure it out, then.</em></p>\n<p>Install the Atom Editor from their <a target=\"_blank\" href=\"https://atom.io/\">official website</a>.</p>\n<p>Open it and work on your code that's already cloned from a remote repository.</p>\n<p>Save your work with Ctrl+S or <code>Save</code>.</p>\n<p>Click on <code>Git</code> which is on the bottom right side, as shown in the image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1637597068004/U5p73scAj.png\" alt=\"0.png\" /></p>\n<p>This is how your work will be seen, currently. It's unstaged. You can see this on the right side of this image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1637597025158/KSNpqjNsu.png\" alt=\"1.png\" /></p>\n<p>It will also show you the changes to the file that you have made. Click <code>enter</code> to stage it.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1637597135311/GLf7WTKAg.png\" alt=\"2.png\" /></p>\n<p>Now, the changes would move to the staged area, on the right side.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1637597186848/xXzQzNg4R.png\" alt=\"3.png\" /></p>\n<p>Enter your commit message before you commit by clicking on <code>Commit to Master</code>. </p>\n<p>Now, your code would have got committed.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1637597269100/eaFRtwNMc.png\" alt=\"4.png\" /></p>\n<p>Click on this <code>Push</code> button to push the code to your remote repository.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1637597297028/45PcTBBnLu.png\" alt=\"5.png\" /></p>\n<p>Once it's pushed, you'll see <code>Fetch</code> instead of <code>Pull</code>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1637597322771/9RwP4uX3rI.png\" alt=\"6.png\" /></p>\n<p>If you'd want to push the changes to a different branch, click on <code>master</code> as shown in this image.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1637597619223/szBMHOg6mQ.png\" alt=\"1.png\" /></p>\n<p>In case you don't have a branch named <code>master</code>, any other branch may show up there. You can change it from the drop-down menu shown above it.</p>\n",
         "contentMarkdown":"*Context: I recently switched to Atom Editor as I faced some problems with VS Code and did not have time to figure it out, then.*\n\nInstall the Atom Editor from their [official website](https://atom.io/).\n\nOpen it and work on your code that's already cloned from a remote repository.\n\nSave your work with Ctrl+S or `Save`.\n\nClick on `Git` which is on the bottom right side, as shown in the image.\n\n![0.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637597068004/U5p73scAj.png)\n\nThis is how your work will be seen, currently. It's unstaged. You can see this on the right side of this image.\n\n![1.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637597025158/KSNpqjNsu.png)\n\nIt will also show you the changes to the file that you have made. Click `enter` to stage it.\n\n![2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637597135311/GLf7WTKAg.png)\n\nNow, the changes would move to the staged area, on the right side.\n\n![3.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637597186848/xXzQzNg4R.png)\n\nEnter your commit message before you commit by clicking on `Commit to Master`. \n\nNow, your code would have got committed.\n\n![4.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637597269100/eaFRtwNMc.png)\n\nClick on this `Push` button to push the code to your remote repository.\n\n![5.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637597297028/45PcTBBnLu.png)\n\nOnce it's pushed, you'll see `Fetch` instead of `Pull`.\n\n![6.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637597322771/9RwP4uX3rI.png)\n\nIf you'd want to push the changes to a different branch, click on `master` as shown in this image.\n\n![1.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637597619223/szBMHOg6mQ.png)\n\nIn case you don't have a branch named `master`, any other branch may show up there. You can change it from the drop-down menu shown above it.",
         "hasPolls":false,
         "totalPollVotes":0,
         "upvotes":0,
         "downvotes":0,
         "tags":[
            "56744721958ef13879b94c63",
            "56744721958ef13879b94aa6",
            "5f058ab0c9763d47e2d2eedc"
         ],
         "untaggedFrom":[
            
         ],
         "upvotedBy":[
            
         ],
         "downvotedBy":[
            
         ],
         "popularity":5080.0054,
         "responses":[
            
         ],
         "responseCount":0,
         "replyCount":0,
         "followers":[
            
         ],
         "isActive":true,
         "isFeatured":false,
         "isEngaging":false,
         "answeredByTarget":false,
         "inviters":[
            
         ],
         "isDelisted":false,
         "isNotified":false,
         "duplicatePosts":[
            
         ],
         "numCollapsed":0,
         "hasReward":false,
         "bookmarkedIn":[
            
         ],
         "similarPostIds":[
            
         ],
         "reactions":[
            "567453d0b73d6a82ac8c5abd",
            "5c090d96c2a9c2a674d35484"
         ],
         "totalReactions":2,
         "reactionsByCurrentUser":[
            
         ],
         "isPinnedToBlog":false,
         "disableComments":false,
         "commentsPaused":false,
         "hasLatex":false,
         "syncAlgolia":true,
         "enableToc":false,
         "toc":[
            
         ],
         "numUniqueUsersWhoReacted":0,
         "_id":"619bc339b8da183c37f51425",
         "title":"Stage, Commit and Push Changes to Github Repositories in Atom without commands",
         "subtitle":"Atom does not have a built-in terminal unless it's installed separately. This article shows how to work with Git on Atom without commands",
         "type":"story",
         "ogImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1637597877633/10IwYQono.png",
         "metaTitle":"Stage, Commit and Push Changes to Github Repositories in Atom without",
         "metaDescription":"Atom does not have a built-in terminal unless it's installed separately. This article shows how to work with Git on Atom without commands",
         "isRepublished":false,
         "originalArticleURL":"",
         "partOfPublication":true,
         "publication":"603505e747934172b362e74a",
         "slug":"stage-commit-and-push-changes-to-github-repositories-in-atom-without-commands",
         "importedFromMedium":false,
         "dateAdded":"2021-11-22T16:18:16.839Z",
         "hasCustomDate":true,
         "stickCoverToBottom":false,
         "pollOptions":[
            
         ],
         "badges":[
            
         ],
         "questionReplies":[
            
         ],
         "contributors":[
            
         ],
         "cuid":"ckwavkn4e03izw7s14unkahpv",
         "author":"603505b449e05a728e85b404",
         "followersCount":1,
         "draft":"6198786d5bb9cc256fc68e3d",
         "hasPinnedTag":false,
         "readTime":1,
         "__v":0,
         "viewsUpdatedOn":1637641803397,
         "reactionToCountMap":{
            "reaction_567453d0b73d6a82ac8c5abd":1,
            "reaction_5c090d96c2a9c2a674d35484":1
         },
         "series":null,
         "dateUpdated":"2021-11-23T04:23:14.898Z",
         "pendingPublicationApproval":false,
         "uniqueReactions":[
            "567453d0b73d6a82ac8c5abd",
            "5c090d96c2a9c2a674d35484"
         ],
         "reactionToCountMapUnique":{
            "reaction_567453d0b73d6a82ac8c5abd":1,
            "reaction_5c090d96c2a9c2a674d35484":1
         },
         "id":"619bc339b8da183c37f51425"
      },
      {
         "reward":{
            "type":"xlm"
         },
         "sourcedFromGithub":false,
         "isAnonymous":false,
         "views":17,
         "slugOverridden":false,
         "coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1637385950087/kufH4tLMZ.png",
         "autoGeneratedCover":"",
         "brief":"Before you start reading, this is an article that will teach you how to configure Github's Personal Access Token so that you need not have to copy-paste the Token each time you push code to remote.\nProblem and Research\nRecently I faced an issue with ...",
         "content":"<p><em>Before you start reading, this is an article that will teach you how to configure Github's Personal Access Token so that you need not have to copy-paste the Token each time you push code to remote.</em></p>\n<h2 id=\"heading-problem-and-research\">Problem and Research</h2>\n<p>Recently I faced an issue with <code>git push</code> on VS Code. </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1637381615284/uGEeGmBQP.png\" alt=\"image.png\" /></p>\n<p>I rechecked my VS Code terminal to see if I was still logged into git and confirmed I was.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1637382189449/sLHEHdA_0.png\" alt=\"image.png\" /></p>\n<h2 id=\"heading-unsuccessful-attempts-to-solve-it\">Unsuccessful Attempts to Solve it</h2>\n<p>I immediately tried a Google search for the error <code>remote: no anonymous write access</code>. I could see that there were a few issues on VS Code's Github Repo regarding this issue.</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://github.com/microsoft/vscode/issues/137161\">Issue 1</a></li>\n<li><a target=\"_blank\" href=\"https://github.com/microsoft/vscode/issues/136791\">Issue 2</a></li>\n</ul>\n<p>The discussion looked like there was some issue or bug with VS Code's latest version 1.62.2 that stopped users from pushing their code in the traditional way of <code>git push origin branch-name</code>. One suggestion was to downgrade the VS Code's version to 1.62.0 and try pushing the code.</p>\n<p>But, that did not work for me. </p>\n<h2 id=\"heading-introspection-and-more-research\">Introspection and More Research</h2>\n<p>I was aware that Github's Personal Access Tokens could be used to push changes from the terminal. It looked like a cumbersome process.</p>\n<p>Entering my GitHub user name and PAT (Personal Access Token) as the password for each push would make the code-commit-push process much difficult. </p>\n<p>GitHub stopped accepting passwords through the terminal, since August 2021. </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1637383569559/uLljHrzLz.png\" alt=\"image.png\" /></p>\n<p>This would make it much harder for developers to push the commits to remote.</p>\n<p>After talking with a  <a target=\"_blank\" href=\"https://hashnode.com/@eduardovedes\">mentor</a> , I understood that it was not an issue with VS Code but, with the authentication during the push. </p>\n<p>He also said that he used the PAT to push the changes.</p>\n<p>Now my goal was to google PAT and see if there was any way to authenticate my pushes without having to enter the Personal Access Token for each push.</p>\n<h2 id=\"heading-solution\">Solution</h2>\n<p>I read through GitHub Documentation, Stackoverflow and Ask Ubuntu. I also did some small trials using the PAT, to arrive at a solution. </p>\n<p>The gist of this solution is that each Repo I was working on had to be authenticated with the PAT so that the pushes could be done seamlessly.</p>\n<h3 id=\"heading-adding-the-pat-to-the-repositories\">Adding the PAT to the Repositories</h3>\n<p>Generate a Personal Access Token, if you don't have one. Read  <a target=\"_blank\" href=\"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\">this document</a> to understand how it can be generated.</p>\n<p>Once you have saved your PAT, it must be added to the Repos on your local machine. </p>\n<p>Open the VS Code Terminal from the Repo you want to add the PAT to.</p>\n<p>Enter <code>git remote set-url origin https://yourPAT@github.com/yourGitUserName/yourGitRepo.git</code>.</p>\n<p><em>Note: It's not a double-line command. <strong>Do not</strong> hit enter after <code>origin</code>.</em></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1637385774257/NsbsFLvg-.png\" alt=\"image.png\" /></p>\n<p>Now you can commit and push without having to enter the Personal Access Token every time you push your commits to remote.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1637384603937/oyxoBE09o.png\" alt=\"image.png\" /></p>\n<h2 id=\"heading-conclusion\">Conclusion</h2>\n<p>This approach saves time and does not compromise security. Feel free to write to me if you have better suggestions on how this can be solved. My contact details are available on my Profile.</p>\n<p>#2Articles1Week #Github</p>\n",
         "contentMarkdown":"*Before you start reading, this is an article that will teach you how to configure Github's Personal Access Token so that you need not have to copy-paste the Token each time you push code to remote.*\n\n## Problem and Research\n\nRecently I faced an issue with `git push` on VS Code. \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637381615284/uGEeGmBQP.png)\n\nI rechecked my VS Code terminal to see if I was still logged into git and confirmed I was.\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637382189449/sLHEHdA_0.png)\n\n## Unsuccessful Attempts to Solve it\n\nI immediately tried a Google search for the error `remote: no anonymous write access`. I could see that there were a few issues on VS Code's Github Repo regarding this issue.\n\n- [Issue 1](https://github.com/microsoft/vscode/issues/137161)\n- [Issue 2](https://github.com/microsoft/vscode/issues/136791)\n\nThe discussion looked like there was some issue or bug with VS Code's latest version 1.62.2 that stopped users from pushing their code in the traditional way of `git push origin branch-name`. One suggestion was to downgrade the VS Code's version to 1.62.0 and try pushing the code.\n\nBut, that did not work for me. \n\n## Introspection and More Research\n\nI was aware that Github's Personal Access Tokens could be used to push changes from the terminal. It looked like a cumbersome process.\n\nEntering my GitHub user name and PAT (Personal Access Token) as the password for each push would make the code-commit-push process much difficult. \n\nGitHub stopped accepting passwords through the terminal, since August 2021. \n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637383569559/uLljHrzLz.png)\n\nThis would make it much harder for developers to push the commits to remote.\n\nAfter talking with a  [mentor](https://hashnode.com/@eduardovedes) , I understood that it was not an issue with VS Code but, with the authentication during the push. \n\nHe also said that he used the PAT to push the changes.\n\nNow my goal was to google PAT and see if there was any way to authenticate my pushes without having to enter the Personal Access Token for each push.\n\n## Solution\n\nI read through GitHub Documentation, Stackoverflow and Ask Ubuntu. I also did some small trials using the PAT, to arrive at a solution. \n\nThe gist of this solution is that each Repo I was working on had to be authenticated with the PAT so that the pushes could be done seamlessly.\n\n### Adding the PAT to the Repositories\n\nGenerate a Personal Access Token, if you don't have one. Read  [this document](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) to understand how it can be generated.\n\nOnce you have saved your PAT, it must be added to the Repos on your local machine. \n\nOpen the VS Code Terminal from the Repo you want to add the PAT to.\n\nEnter `git remote set-url origin https://yourPAT@github.com/yourGitUserName/yourGitRepo.git`.\n\n*Note: It's not a double-line command. **Do not** hit enter after `origin`.*\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637385774257/NsbsFLvg-.png)\n\nNow you can commit and push without having to enter the Personal Access Token every time you push your commits to remote.\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1637384603937/oyxoBE09o.png)\n\n## Conclusion\n\nThis approach saves time and does not compromise security. Feel free to write to me if you have better suggestions on how this can be solved. My contact details are available on my Profile.\n\n\n#2Articles1Week #Github",
         "hasPolls":false,
         "totalPollVotes":0,
         "upvotes":0,
         "downvotes":0,
         "tags":[
            "56744721958ef13879b94c63",
            "5f058ab0c9763d47e2d2eedc"
         ],
         "untaggedFrom":[
            
         ],
         "upvotedBy":[
            
         ],
         "downvotedBy":[
            
         ],
         "popularity":5074.0759,
         "responses":[
            
         ],
         "responseCount":0,
         "replyCount":0,
         "followers":[
            
         ],
         "isActive":true,
         "isFeatured":false,
         "isEngaging":false,
         "answeredByTarget":false,
         "inviters":[
            
         ],
         "isDelisted":false,
         "isNotified":false,
         "duplicatePosts":[
            
         ],
         "numCollapsed":0,
         "hasReward":false,
         "bookmarkedIn":[
            
         ],
         "similarPostIds":[
            
         ],
         "reactions":[
            "5c090d96c2a9c2a674d35485",
            "5c090d96c2a9c2a674d35484",
            "5c090d96c2a9c2a674d35486",
            "567453d0b73d6a82ac8c5abd",
            "5c090d96c2a9c2a674d3548a",
            "5c090d96c2a9c2a674d35488",
            "567453d0b73d6a82ac8c5ab9",
            "567453d0b73d6a82ac8c5abc",
            "5c090d96c2a9c2a674d3548b",
            "5d9dd859f31791c942dc5b52"
         ],
         "totalReactions":10,
         "reactionsByCurrentUser":[
            
         ],
         "isPinnedToBlog":false,
         "disableComments":false,
         "commentsPaused":false,
         "hasLatex":false,
         "syncAlgolia":true,
         "enableToc":false,
         "toc":[
            
         ],
         "numUniqueUsersWhoReacted":0,
         "_id":"619887dddf376a260c5885e5",
         "title":"Configuring Github's Personal Access Token to Make Code Pushes Easier",
         "subtitle":"Save time by configuring Github's Personal Access Token to your Repos so that it need not be copy-pasted each time the code is pushed.",
         "type":"story",
         "ogImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1637385994634/82o7sDt6m.png",
         "metaTitle":"Configuring Github's Personal Access Token to Make Code Pushes Easier",
         "metaDescription":"Save time by configuring Github's Personal Access Token to your Repos so that it need not be copy-pasted each time the code is pushed.",
         "isRepublished":false,
         "originalArticleURL":"",
         "partOfPublication":true,
         "publication":"603505e747934172b362e74a",
         "slug":"configuring-githubs-personal-access-token-to-make-code-pushes-easier",
         "importedFromMedium":false,
         "dateAdded":"2021-11-19T05:26:54.000Z",
         "hasCustomDate":true,
         "stickCoverToBottom":false,
         "pollOptions":[
            
         ],
         "badges":[
            
         ],
         "questionReplies":[
            
         ],
         "contributors":[
            
         ],
         "cuid":"ckw7dgycd06h6iks19jvh93yu",
         "author":"603505b449e05a728e85b404",
         "followersCount":1,
         "draft":"6197d93ddf376a260c587c70",
         "hasPinnedTag":false,
         "readTime":3,
         "__v":1,
         "series":null,
         "dateUpdated":"2021-11-22T16:19:52.441Z",
         "pendingPublicationApproval":false,
         "viewsUpdatedOn":1637638204585,
         "reactionToCountMap":{
            "reaction_5c090d96c2a9c2a674d35485":1,
            "reaction_5c090d96c2a9c2a674d35484":1,
            "reaction_5c090d96c2a9c2a674d35486":1,
            "reaction_567453d0b73d6a82ac8c5abd":1,
            "reaction_5c090d96c2a9c2a674d3548a":1,
            "reaction_5c090d96c2a9c2a674d35488":1,
            "reaction_567453d0b73d6a82ac8c5ab9":1,
            "reaction_567453d0b73d6a82ac8c5abc":1,
            "reaction_5c090d96c2a9c2a674d3548b":1,
            "reaction_5d9dd859f31791c942dc5b52":1
         },
         "uniqueReactions":[
            "5c090d96c2a9c2a674d35485",
            "5c090d96c2a9c2a674d35484",
            "5c090d96c2a9c2a674d35486",
            "567453d0b73d6a82ac8c5abd",
            "5c090d96c2a9c2a674d3548a",
            "5c090d96c2a9c2a674d35488",
            "567453d0b73d6a82ac8c5ab9",
            "567453d0b73d6a82ac8c5abc",
            "5c090d96c2a9c2a674d3548b",
            "5d9dd859f31791c942dc5b52"
         ],
         "reactionToCountMapUnique":{
            "reaction_5c090d96c2a9c2a674d35485":1,
            "reaction_5c090d96c2a9c2a674d35484":1,
            "reaction_5c090d96c2a9c2a674d35486":1,
            "reaction_567453d0b73d6a82ac8c5abd":1,
            "reaction_5c090d96c2a9c2a674d3548a":1,
            "reaction_5c090d96c2a9c2a674d35488":1,
            "reaction_567453d0b73d6a82ac8c5ab9":1,
            "reaction_567453d0b73d6a82ac8c5abc":1,
            "reaction_5c090d96c2a9c2a674d3548b":1,
            "reaction_5d9dd859f31791c942dc5b52":1
         },
         "id":"619887dddf376a260c5885e5"
      },
      {
         "reward":{
            "type":"xlm"
         },
         "sourcedFromGithub":false,
         "isAnonymous":false,
         "views":14,
         "slugOverridden":false,
         "coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1635915131264/YAGKiwsSX.png",
         "autoGeneratedCover":"",
         "brief":"Introduction\nBefore we get into the crux of Github submodules, let me give you some context. I'm writing this article on Day 9th of my #100DaysofCode challenge. I'm working my way through freeCodeCamp's Fronted certifications and building a portfolio...",
         "content":"<h2 id=\"introduction\">Introduction</h2>\n<p>Before we get into the crux of Github submodules, let me give you some context. I'm writing this article on Day 9th of my #100DaysofCode challenge. I'm working my way through freeCodeCamp's Fronted certifications and building a portfolio website on the side. I also participated in the #Hacktoberfest, last month.</p>\n<p>I document my progress in freeCodeCamp by saving the important answers in <a target=\"_blank\" href=\"https://github.com/ckvignesh/FreeCodeCamp\">this repositary</a>. But, I faced a challenge while updating my progress in the <a target=\"_blank\" href=\"https://github.com/ckvignesh/100-days-of-code/\">#100DaysofCode log file Repo</a>.</p>\n<p>It was cumbersome to handle both these Repos as they needed to be updated daily, to keep track of my progress. Then I created a lot of other Repos too, to document solutions to smaller problems that I solved. Mostly in CSS games as I was learning CSS in freeCodeCamp back then. </p>\n<p>I also needed to find a way to map these Repos into my #100DaysofCode log Repo as proof. You could say that I can easily add the link of those Repos to my Markdown log file. But, I felt that would become a daily chore as I keep increasing the number of folders for each section or topic.</p>\n<p>Yesterday, I moved a few of these Repos to my #100DaysofCode Repo and tried to commit it. But, the terminal threw this message.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635917783549/ST4vwlwkp.png\" alt=\"Error.png\" /></p>\n<p>This is how I stumbled upon GitHub submodules.</p>\n<h2 id=\"github-submodules\">Github Submodules</h2>\n<p>When you're working on a project, you may have to use another project within it. In my case, I owned all the Repos I used. But, it need not be like that always. You may sometimes be using a 3rd party's Repo for your work. Sometimes, one Repo may be needed for many Projects. In any of these cases, you will have to rely on Github Submodules.</p>\n<p>Git submodules allow you to Repo as a subdirectory or a folder within another Repo. Let's now see how we can add Submodules without making such an error as I made before.</p>\n<p>The usual command to clone a repo is like this:</p>\n<p><code>git clone https://github.com/uName/repoName.git</code></p>\n<p>But this won't make it a submodule. It'll remain as a standalone Repository. Now, this is not how we add a Submodule in another Repository. The command to clone it is:</p>\n<p><code>git submodule add https://github.com/uName/repoName.git</code> </p>\n<p>Once this has been completed successfully, try running <code>git status</code> to see what are the new files added. You'll see this.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635918611200/MVvc9Jhz_.png\" alt=\"Gitmodules.png\" /></p>\n<p>You can see 2 things here, one the submodule Repo and then a file named <code>.gitmodules</code>. It's similar to the .git folder that's hidden and you may not see it unless you enable \"show hidden files\". </p>\n<p>Let's check <code>.gitmodules</code>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635918830255/yZgNk8YLZ.png\" alt=\"Submodule file.png\" /></p>\n<p>Here, you can see the details of the submodule. This is the file that tells Git about your submodule. Now you can work on your Repo or the submodule Repo and commit it to Github.</p>\n<p>This is how my submodules appear in the Parent Repo.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635919068274/hJb372Bs-y.png\" alt=\"Submodules.png\" /></p>\n<p>It lets you click the folders and leads you to the submodule Repos directly. The <code>@ xyz123</code> value after the submodule Repos show the last commit of the submodule/child Repo that's present in the Parent Repo's submodule.</p>\n<h2 id=\"working-on-submodules-and-keeping-them-updated-within-the-parent-repository\">Working on Submodules and keeping them updated within the Parent Repository</h2>\n<p>Now let me make some changes to both these submodule/child Repos and commit them. But this won't change the <code>@ xyz123</code> values with the folder names in the Parent Repo. They'll remain constant like this:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635919068274/hJb372Bs-y.png\" alt=\"Submodules.png\" /></p>\n<p>Now, if you need the updated version of the child Repo within your Parent Repo, you must add these changes from the root of the parent Repo. It'll show up like this:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635919888275/nN56FRCuQ.png\" alt=\"1.png\" /></p>\n<p>Once you commit and push the changes, the changes are reflected in the Parent Repo. You can see the difference in the commit numbers in this picture.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1635919935896/9GwJmp8et.png\" alt=\"2.png\" /></p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Github Submodules are a very vast topic and this article is just to help you get started with it. There is a lot more to explore here.</p>\n<p>You can read more from the official documentation, <a target=\"_blank\" href=\"https://git-scm.com/book/en/v2/Git-Tools-Submodules\">here</a>.</p>\n<p>#github #100DaysOfCode #Submodules #git #2Articles1Week</p>\n",
         "contentMarkdown":"## Introduction\n\nBefore we get into the crux of Github submodules, let me give you some context. I'm writing this article on Day 9th of my #100DaysofCode challenge. I'm working my way through freeCodeCamp's Fronted certifications and building a portfolio website on the side. I also participated in the #Hacktoberfest, last month.\n\nI document my progress in freeCodeCamp by saving the important answers in [this repositary](https://github.com/ckvignesh/FreeCodeCamp). But, I faced a challenge while updating my progress in the [#100DaysofCode log file Repo](https://github.com/ckvignesh/100-days-of-code/).\n\nIt was cumbersome to handle both these Repos as they needed to be updated daily, to keep track of my progress. Then I created a lot of other Repos too, to document solutions to smaller problems that I solved. Mostly in CSS games as I was learning CSS in freeCodeCamp back then. \n\nI also needed to find a way to map these Repos into my #100DaysofCode log Repo as proof. You could say that I can easily add the link of those Repos to my Markdown log file. But, I felt that would become a daily chore as I keep increasing the number of folders for each section or topic.\n\nYesterday, I moved a few of these Repos to my #100DaysofCode Repo and tried to commit it. But, the terminal threw this message.\n\n![Error.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635917783549/ST4vwlwkp.png)\n\nThis is how I stumbled upon GitHub submodules.\n\n## Github Submodules\n\nWhen you're working on a project, you may have to use another project within it. In my case, I owned all the Repos I used. But, it need not be like that always. You may sometimes be using a 3rd party's Repo for your work. Sometimes, one Repo may be needed for many Projects. In any of these cases, you will have to rely on Github Submodules.\n\nGit submodules allow you to Repo as a subdirectory or a folder within another Repo. Let's now see how we can add Submodules without making such an error as I made before.\n\nThe usual command to clone a repo is like this:\n\n`git clone https://github.com/uName/repoName.git`\n\nBut this won't make it a submodule. It'll remain as a standalone Repository. Now, this is not how we add a Submodule in another Repository. The command to clone it is:\n\n`git submodule add https://github.com/uName/repoName.git` \n\nOnce this has been completed successfully, try running `git status` to see what are the new files added. You'll see this.\n\n![Gitmodules.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635918611200/MVvc9Jhz_.png)\n\nYou can see 2 things here, one the submodule Repo and then a file named `.gitmodules`. It's similar to the .git folder that's hidden and you may not see it unless you enable \"show hidden files\". \n\nLet's check `.gitmodules`.\n\n![Submodule file.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635918830255/yZgNk8YLZ.png)\n\nHere, you can see the details of the submodule. This is the file that tells Git about your submodule. Now you can work on your Repo or the submodule Repo and commit it to Github.\n\nThis is how my submodules appear in the Parent Repo.\n\n![Submodules.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635919068274/hJb372Bs-y.png)\n\nIt lets you click the folders and leads you to the submodule Repos directly. The ` @ xyz123 ` value after the submodule Repos show the last commit of the submodule/child Repo that's present in the Parent Repo's submodule.\n\n## Working on Submodules and keeping them updated within the Parent Repository\n\nNow let me make some changes to both these submodule/child Repos and commit them. But this won't change the ` @ xyz123 ` values with the folder names in the Parent Repo. They'll remain constant like this:\n\n![Submodules.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635919068274/hJb372Bs-y.png)\n\nNow, if you need the updated version of the child Repo within your Parent Repo, you must add these changes from the root of the parent Repo. It'll show up like this:\n\n![1.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635919888275/nN56FRCuQ.png)\n\nOnce you commit and push the changes, the changes are reflected in the Parent Repo. You can see the difference in the commit numbers in this picture.\n\n![2.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1635919935896/9GwJmp8et.png)\n\n\n## Conclusion\n\nGithub Submodules are a very vast topic and this article is just to help you get started with it. There is a lot more to explore here.\n\nYou can read more from the official documentation, [here](https://git-scm.com/book/en/v2/Git-Tools-Submodules).\n\n\n\n\n\n#github #100DaysOfCode #Submodules #git #2Articles1Week",
         "hasPolls":false,
         "totalPollVotes":0,
         "upvotes":0,
         "downvotes":0,
         "tags":[
            "56744721958ef13879b94c63",
            "56744723958ef13879b9526c",
            "5f058ab0c9763d47e2d2eedc"
         ],
         "untaggedFrom":[
            
         ],
         "upvotedBy":[
            
         ],
         "downvotedBy":[
            
         ],
         "popularity":5040.511,
         "responses":[
            
         ],
         "responseCount":0,
         "replyCount":0,
         "followers":[
            
         ],
         "isActive":true,
         "isFeatured":false,
         "isEngaging":false,
         "answeredByTarget":false,
         "inviters":[
            
         ],
         "isDelisted":false,
         "isNotified":false,
         "duplicatePosts":[
            
         ],
         "numCollapsed":0,
         "hasReward":false,
         "bookmarkedIn":[
            
         ],
         "similarPostIds":[
            
         ],
         "reactions":[
            
         ],
         "totalReactions":0,
         "reactionsByCurrentUser":[
            
         ],
         "isPinnedToBlog":false,
         "disableComments":false,
         "commentsPaused":false,
         "hasLatex":false,
         "syncAlgolia":false,
         "enableToc":false,
         "toc":[
            
         ],
         "numUniqueUsersWhoReacted":0,
         "_id":"61822b18a4505a32bcf1de7f",
         "title":"Github Submodules and how you can use them for your Projects",
         "subtitle":"Github Submodules allow you to add a Repository inside another, making it easy for any dependencies or reusing libraries for multiple projects.",
         "type":"story",
         "ogImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1635915214270/xLFIFzSGZ.png",
         "metaTitle":"Github Submodules and how you can use them for your Projects",
         "metaDescription":"Github Submodules allow you to add a Repository inside another, making it easy for any dependencies or reusing libraries for multiple projects.",
         "isRepublished":false,
         "originalArticleURL":"",
         "partOfPublication":true,
         "publication":"603505e747934172b362e74a",
         "slug":"github-submodules-and-how-you-can-use-them-for-your-projects",
         "importedFromMedium":false,
         "dateAdded":"2021-11-02T06:23:15.000Z",
         "hasCustomDate":true,
         "stickCoverToBottom":false,
         "pollOptions":[
            
         ],
         "badges":[
            
         ],
         "questionReplies":[
            
         ],
         "contributors":[
            
         ],
         "cuid":"ckvj4xbm706m40ss12utwhgwa",
         "author":"603505b449e05a728e85b404",
         "followersCount":1,
         "draft":"618213c4a4505a32bcf1dcd4",
         "hasPinnedTag":false,
         "readTime":3,
         "__v":1,
         "series":null,
         "dateUpdated":"2021-11-03T06:30:57.788Z",
         "pendingPublicationApproval":false,
         "viewsUpdatedOn":1637422205997,
         "uniqueReactions":[
            
         ],
         "reactionToCountMapUnique":{
            "any":1
         },
         "id":"61822b18a4505a32bcf1de7f"
      },
      {
         "reward":{
            "type":"xlm"
         },
         "sourcedFromGithub":false,
         "isAnonymous":false,
         "views":35,
         "slugOverridden":false,
         "coverImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1634905806362/FmKCbxTk4.png",
         "autoGeneratedCover":"",
         "brief":"Hi there, Thanks for visiting this post. October is a month that has become a metaphor for Open Source thanks to Hashnode's Open Source October.\nYou don't need to know how to Code to get started\nI'm a newbie developer who was eager to contribute to O...",
         "content":"<p>Hi there, Thanks for visiting this post. October is a month that has become a metaphor for Open Source thanks to Hashnode's <em>Open Source October</em>.</p>\n<h2 id=\"you-dont-need-to-know-how-to-code-to-get-started\">You don't need to know how to Code to get started</h2>\n<p>I'm a newbie developer who was eager to contribute to Open Source but felt it would be overwhelming. I spent most of my Uni hating code. It was only during the last year that I seriously started coding after I started a hands-on Project.</p>\n<p>I still don't consider myself an \"expert coder\" though I have learnt a lot over this year. </p>\n<p>So, I'll address the first concern you may have in mind.</p>\n<blockquote>\n<p>Do I need to know how to code, to contribute to Open Source?</p>\n</blockquote>\n<p>Short answer - No.</p>\n<p>Open Source is not just about coding. There are documentations (like How To's, Readme's etc) and translations that need to be done.</p>\n<p>But, to contribute to Open Source, you must be comfortable with - Github. Because that's where most of the OS Repositories are housed.</p>\n<h2 id=\"my-first-pull-request-that-was-merged\">My First Pull Request that was merged</h2>\n<p>I was researching about Product Management, a few days ago. It's something I'd like to do sometime later in my life. I came across a Github Repo that had a vast collection of links related to Product Management. If you're interested, you can check it  <a target=\"_blank\" href=\"https://github.com/ProductHired/open-product-management\">here</a>.</p>\n<p>As I went through this, I noticed 2 links were not working. It was a broken link that was a Quora Answer by Jackie Bavaro. I noticed that one more link in the same section was not working.</p>\n<p>I first copy-pasted the headline of the Quora answer into Google to search for them, as I found it was a very interesting question. I soon found those answers and realised that the link was different. Perhaps there were some changes made by Quora that led to a new link for this content.</p>\n<p>I thought of replacing the links in the Github Repo with the new links I found on Google. It was to help the maintainer and the users of the Repo get access to it.</p>\n<p>I forked the Repo and updated the link in the file, like this:\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1634904841190/pualeG1hk.png\" alt=\"Screenshot from 2021-10-22 17-43-44.png\" /></p>\n<p>Now, I was ready to submit my first Pull Request. I was unsure whether the Owner and Maintainer would accept it. I even checked their commit history and saw that there had been some delays in merging PRs.</p>\n<p>Anyway, I submitted my first PR &amp; forgot about it.</p>\n<p>A few days later, I got an email:\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1634905102583/5TWn1RWDR.png\" alt=\"Screenshot from 2021-10-22 17-48-09.png\" /></p>\n<p>Yes, I was thrilled to see that my Pull Request was merged.\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1634905176483/Q37njL72n.png\" alt=\"Screenshot from 2021-10-22 17-49-12.png\" /></p>\n<p>It was a turning point for me! This gave me the morale boost to make more contributions. I'm still working on a few.</p>\n<h2 id=\"why-you-must-contribute-to-open-source\">Why you must contribute to Open Source</h2>\n<p>The returns you get from OS Contributions may not be like the typical expectations you have. But, let me assure you that it'll benefit you in unexpected ways. Here's a couple of them:</p>\n<ul>\n<li>You become noticed in the community</li>\n<li>It helps you understand code, better</li>\n</ul>\n<p>To write better code, you need to be able to READ code and understand why someone has taken a specific approach.</p>\n<p>Thanks for reading this and I hope this will inspire you to contribute.</p>\n<p>#OpenSource </p>\n",
         "contentMarkdown":"Hi there, Thanks for visiting this post. October is a month that has become a metaphor for Open Source thanks to Hashnode's *Open Source October*.\n\n## You don't need to know how to Code to get started ##\n\nI'm a newbie developer who was eager to contribute to Open Source but felt it would be overwhelming. I spent most of my Uni hating code. It was only during the last year that I seriously started coding after I started a hands-on Project.\n\nI still don't consider myself an \"expert coder\" though I have learnt a lot over this year. \n\nSo, I'll address the first concern you may have in mind.\n\n> Do I need to know how to code, to contribute to Open Source?\n\nShort answer - No.\n\nOpen Source is not just about coding. There are documentations (like How To's, Readme's etc) and translations that need to be done.\n\nBut, to contribute to Open Source, you must be comfortable with - Github. Because that's where most of the OS Repositories are housed.\n\n## My First Pull Request that was merged\n\nI was researching about Product Management, a few days ago. It's something I'd like to do sometime later in my life. I came across a Github Repo that had a vast collection of links related to Product Management. If you're interested, you can check it  [here](https://github.com/ProductHired/open-product-management).\n\nAs I went through this, I noticed 2 links were not working. It was a broken link that was a Quora Answer by Jackie Bavaro. I noticed that one more link in the same section was not working.\n\nI first copy-pasted the headline of the Quora answer into Google to search for them, as I found it was a very interesting question. I soon found those answers and realised that the link was different. Perhaps there were some changes made by Quora that led to a new link for this content.\n\nI thought of replacing the links in the Github Repo with the new links I found on Google. It was to help the maintainer and the users of the Repo get access to it.\n\nI forked the Repo and updated the link in the file, like this:\n![Screenshot from 2021-10-22 17-43-44.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634904841190/pualeG1hk.png)\n\nNow, I was ready to submit my first Pull Request. I was unsure whether the Owner and Maintainer would accept it. I even checked their commit history and saw that there had been some delays in merging PRs.\n\nAnyway, I submitted my first PR & forgot about it.\n\nA few days later, I got an email:\n![Screenshot from 2021-10-22 17-48-09.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634905102583/5TWn1RWDR.png)\n\nYes, I was thrilled to see that my Pull Request was merged.\n![Screenshot from 2021-10-22 17-49-12.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1634905176483/Q37njL72n.png)\n\nIt was a turning point for me! This gave me the morale boost to make more contributions. I'm still working on a few.\n\n## Why you must contribute to Open Source\n\nThe returns you get from OS Contributions may not be like the typical expectations you have. But, let me assure you that it'll benefit you in unexpected ways. Here's a couple of them:\n\n- You become noticed in the community\n- It helps you understand code, better\n\nTo write better code, you need to be able to READ code and understand why someone has taken a specific approach.\n\nThanks for reading this and I hope this will inspire you to contribute.\n\n\n#OpenSource ",
         "hasPolls":false,
         "totalPollVotes":0,
         "upvotes":0,
         "downvotes":0,
         "tags":[
            "56744722958ef13879b94f32",
            "5f08ee681981c53c4987f2b3"
         ],
         "untaggedFrom":[
            
         ],
         "upvotedBy":[
            
         ],
         "downvotedBy":[
            
         ],
         "popularity":5020.9233,
         "responses":[
            
         ],
         "responseCount":0,
         "replyCount":0,
         "followers":[
            
         ],
         "isActive":true,
         "isFeatured":false,
         "isEngaging":false,
         "answeredByTarget":false,
         "inviters":[
            
         ],
         "isDelisted":false,
         "isNotified":false,
         "duplicatePosts":[
            
         ],
         "numCollapsed":0,
         "hasReward":false,
         "bookmarkedIn":[
            
         ],
         "similarPostIds":[
            
         ],
         "reactions":[
            "5c090d96c2a9c2a674d35486",
            "5c090d96c2a9c2a674d35484",
            "5c090d96c2a9c2a674d35485",
            "567453d0b73d6a82ac8c5abd",
            "5c090d96c2a9c2a674d3548a",
            "5c090d96c2a9c2a674d35488",
            "567453d0b73d6a82ac8c5ab9",
            "567453d0b73d6a82ac8c5abc",
            "5c090d96c2a9c2a674d3548b",
            "5d9dd859f31791c942dc5b52"
         ],
         "totalReactions":11,
         "reactionsByCurrentUser":[
            
         ],
         "isPinnedToBlog":false,
         "disableComments":false,
         "commentsPaused":false,
         "hasLatex":false,
         "syncAlgolia":true,
         "enableToc":false,
         "toc":[
            
         ],
         "numUniqueUsersWhoReacted":0,
         "_id":"6172af3b0c5e175a1c614a0d",
         "title":"My first Pull Request that was merged and why you must contribute to Open Source",
         "subtitle":"You need not be an expert coder to get started with Open Source. I'll show you how I made my first contribution.",
         "type":"story",
         "ogImage":"https://cdn.hashnode.com/res/hashnode/image/upload/v1634905831232/F9jaXLuKS.png",
         "metaTitle":"First-time Open Source contribution without coding",
         "metaDescription":"You need not be a coder to get started with Open Source.",
         "isRepublished":false,
         "partOfPublication":true,
         "publication":"603505e747934172b362e74a",
         "slug":"my-first-pull-request-that-was-merged-and-why-you-must-contribute-to-open-source",
         "dateAdded":"2021-10-22T12:31:26.995Z",
         "hasCustomDate":true,
         "pollOptions":[
            
         ],
         "badges":[
            
         ],
         "questionReplies":[
            
         ],
         "contributors":[
            
         ],
         "cuid":"ckv2crqdh0p69sss1drkk0ewd",
         "author":"603505b449e05a728e85b404",
         "followersCount":1,
         "draft":"6172a5780f452c1cd94f848d",
         "hasPinnedTag":false,
         "readTime":3,
         "__v":0,
         "series":null,
         "dateUpdated":"2021-10-22T12:43:13.871Z",
         "pendingPublicationApproval":false,
         "reactionToCountMap":{
            "reaction_5c090d96c2a9c2a674d35486":2,
            "reaction_5c090d96c2a9c2a674d35484":1,
            "reaction_5c090d96c2a9c2a674d35485":1,
            "reaction_567453d0b73d6a82ac8c5abd":1,
            "reaction_5c090d96c2a9c2a674d3548a":1,
            "reaction_5c090d96c2a9c2a674d35488":1,
            "reaction_567453d0b73d6a82ac8c5ab9":1,
            "reaction_567453d0b73d6a82ac8c5abc":1,
            "reaction_5c090d96c2a9c2a674d3548b":1,
            "reaction_5d9dd859f31791c942dc5b52":1
         },
         "viewsUpdatedOn":1637429403688,
         "uniqueReactions":[
            "5c090d96c2a9c2a674d35486",
            "5c090d96c2a9c2a674d35484",
            "5c090d96c2a9c2a674d35485",
            "567453d0b73d6a82ac8c5abd",
            "5c090d96c2a9c2a674d3548a",
            "5c090d96c2a9c2a674d35488",
            "567453d0b73d6a82ac8c5ab9",
            "567453d0b73d6a82ac8c5abc",
            "5c090d96c2a9c2a674d3548b",
            "5d9dd859f31791c942dc5b52"
         ],
         "reactionToCountMapUnique":{
            "reaction_5c090d96c2a9c2a674d35486":2,
            "reaction_5c090d96c2a9c2a674d35484":1,
            "reaction_5c090d96c2a9c2a674d35485":1,
            "reaction_567453d0b73d6a82ac8c5abd":1,
            "reaction_5c090d96c2a9c2a674d3548a":1,
            "reaction_5c090d96c2a9c2a674d35488":1,
            "reaction_567453d0b73d6a82ac8c5ab9":1,
            "reaction_567453d0b73d6a82ac8c5abc":1,
            "reaction_5c090d96c2a9c2a674d3548b":1,
            "reaction_5d9dd859f31791c942dc5b52":1
         },
         "id":"6172af3b0c5e175a1c614a0d"
      }
   ]
}
